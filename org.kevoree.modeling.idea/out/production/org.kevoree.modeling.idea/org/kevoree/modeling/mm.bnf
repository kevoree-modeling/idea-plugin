
{
  parserClass="org.kevoree.modeling.idea.parser.MetaModelParser"
  parserUtilClass="org.kevoree.modeling.idea.parser.MetaModelParserUtil"
  stubParserClass="org.kevoree.modeling.idea.parser.GeneratedParserUtilBase"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="MetaModel"
  psiImplClassSuffix="Impl"
  psiPackage="org.kevoree.modeling.idea.psi"
  psiImplPackage="org.kevoree.modeling.idea.psi.impl"

  elementTypeHolderClass="org.kevoree.modeling.idea.psi.MetaModelTypes"
  elementTypeClass="org.kevoree.modeling.idea.psi.MetaModelElementType"
  tokenTypeClass="org.kevoree.modeling.idea.psi.MetaModelTokenType"

  psiImplUtilClass="org.kevoree.modeling.idea.psi.MetaModelUtil"

tokens=[
    CLASS='class'
    ENUM='enum'
    FUNC='func'
    OPPOSITE='oppositeOf'
    COLON=':'
    COMMA=','
    SUB='/'
    EQ='='
    MULT_OPEN='['
    BODY_OPEN='{'
    MULT_CLOSE=']'
    BODY_CLOSE='}'
    ANNOT_PARAM_OPEN='('
    ANNOT_PARAM_CLOSE=')'
    MULT_SEP='.'
    STAR='*'
    eof = '<<EOF>>'
    comment='regexp://.*'
    NUMBER='regexp:[\-]?[0-9]+[.]?[0-9]*'
    IDENT='regexp:[\*\.a-zA-Z0-9_\-]+'
    TANNOTATION='regexp:[@][\.a-zA-Z0-9_\-]+'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}

METAMODEL ::= DECLARATION*
DECLARATION ::= (CLASS_DECLARATION | ENUM_DECLARATION | eof | newline | CRLF)
CLASS_DECLARATION ::= CLASS TYPE_DECLARATION PARENTS_DECLARATION? BODY_OPEN CLASS_ELEM_DECLARATION* BODY_CLOSE {pin=1 recoverWhile=rule_start}
ENUM_DECLARATION ::= ENUM TYPE_DECLARATION BODY_OPEN ENUM_ELEM_DECLARATION* BODY_CLOSE {pin=1 recoverWhile=rule_start}
ENUM_ELEM_DECLARATION ::= IDENT
PARENTS_DECLARATION ::= COLON TYPE_DECLARATION (COMMA TYPE_DECLARATION)*
TYPE_DECLARATION ::= IDENT {mixin="org.kevoree.modeling.idea.psi.impl.MetaModelNamedElementImpl" implements="org.kevoree.modeling.idea.psi.MetaModelNamedElement" methods=[setName getNameIdentifier]}
CLASS_ELEM_DECLARATION ::= RELATION_DECLARATION | OPERATION_DECLARATION
RELATION_DECLARATION ::= ANNOTATIONS RELATION_NAME COLON TYPE_DECLARATION MULTIPLICITY_DECLARATION? RELATION_OPPOSITE?
RELATION_OPPOSITE ::= OPPOSITE IDENT
RELATION_NAME ::= IDENT
ANNOTATIONS ::= ANNOTATION*
ANNOTATION ::= TANNOTATION ANNOTATION_PARAM?
ANNOTATION_PARAM ::= ANNOT_PARAM_OPEN NUMBER ANNOT_PARAM_CLOSE
MULTIPLICITY_DECLARATION ::= MULT_OPEN MULTIPLICITY_DECLARATION_LOWER COMMA MULTIPLICITY_DECLARATION_UPPER MULT_CLOSE
MULTIPLICITY_DECLARATION_LOWER ::= STAR_OR_NB
MULTIPLICITY_DECLARATION_UPPER ::= STAR_OR_NB

OPERATION_DECLARATION ::= FUNC OPERATION_NAME (ANNOT_PARAM_OPEN OPERATION_PARAMS ANNOT_PARAM_CLOSE)? (OPERATION_RETURN)?
OPERATION_PARAMS ::= OPERATION_PARAM (COMMA OPERATION_PARAM)*
OPERATION_PARAM ::= IDENT COLON TYPE_DECLARATION
OPERATION_RETURN ::= COLON TYPE_DECLARATION
OPERATION_NAME ::= IDENT

private STAR_OR_NB ::= (NUMBER | STAR)
private rule_start ::= !(CLASS|ENUM)

/*
private COLON_SEP ::= COLON IDENT
private COMMA_SEP ::= COMMA IDENT
*/

/*
private ADD_STATEMENT ::= ADD IDENT COMMA_SEP* COLON IDENT (SUB IDENT)? {pin=2 recoverWhile=rule_start}
private REMOVE_STATEMENT ::= REMOVE IDENT COMMA_SEP* {pin=2 recoverWhile=rule_start}
private BIND_STATEMENT ::= BIND IDENT COMMA_SEP* IDENT {pin=2 recoverWhile=rule_start}
private UNBIND_STATEMENT ::= UNBIND IDENT COMMA_SEP* IDENT {pin=2 recoverWhile=rule_start}
private ATTACH_STATEMENT ::= ATTACH IDENT COMMA_SEP* IDENT {pin=2 recoverWhile=rule_start}
private DETACH_STATEMENT ::= DETACH IDENT COMMA_SEP* IDENT {pin=2 recoverWhile=rule_start}
private NAMESPACE_STATEMENNT ::= NAMESPACE IDENT {pin=2 recoverWhile=rule_start}
private REPO_STATEMENNT ::= REPO string {pin=2 recoverWhile=rule_start}
private INCLUDE_STATEMENNT ::= INCLUDE IDENT COLON_SEP* {pin=2 recoverWhile=rule_start}
private MOVE_STATEMENT ::= MOVE IDENT COMMA_SEP* IDENT {pin=2 recoverWhile=rule_start}
private NETWORK_STATEMENT ::= NETWORK IDENT IDENT {pin=2 recoverWhile=rule_start}
private SET_STATEMENT ::= SET IDENT (SUB IDENT)? EQ string {pin=2 recoverWhile=rule_start}
private START_STATEMENT ::= START IDENT COMMA_SEP* {pin=2 recoverWhile=rule_start}
private STOP_STATEMENT ::= STOP IDENT COMMA_SEP* {pin=2 recoverWhile=rule_start}
*/

