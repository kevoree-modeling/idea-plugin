/* The following code was generated by JFlex 1.4.3 on 7/27/15 4:25 PM */

package org.kevoree.modeling;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.kevoree.modeling.idea.psi.MetaModelTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/27/15 4:25 PM from the specification file
 * <tt>/Users/duke/Documents/dev/kevoree-modeling/org.kevoree.modeling.idea/org.kevoree.modeling.idea/src/org/kevoree/modeling/_MetaModelLexer.flex</tt>
 */
public class _MetaModelLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\0\1\12"+
    "\4\0\1\10\1\44\1\45\1\31\1\0\1\40\1\4\1\6\1\3"+
    "\12\5\1\37\1\0\1\46\1\41\1\52\2\0\1\53\1\7\1\62"+
    "\1\61\1\47\1\51\2\7\1\56\2\7\1\63\1\7\1\54\1\50"+
    "\2\7\1\64\1\57\1\55\6\7\1\0\1\11\2\0\1\60\1\0"+
    "\1\21\1\7\1\17\1\33\1\23\1\27\1\7\1\16\1\14\2\7"+
    "\1\20\1\26\1\24\1\32\1\34\1\7\1\30\1\22\1\15\1\25"+
    "\1\7\1\13\1\36\1\35\1\7\1\42\1\0\1\43\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\2\1\12\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\1\2\4\1\16\1\5\1\0\1\17\3\0"+
    "\14\4\1\0\5\4\1\20\5\4\1\21\2\4\1\0"+
    "\2\4\1\22\2\4\1\23\2\4\1\24\1\25\1\26"+
    "\2\4\1\0\1\4\1\27\1\30\1\31\4\4\1\0"+
    "\3\4\1\32\1\4\1\0\1\4\1\33\1\34\1\4"+
    "\1\35\5\4\1\36\7\4\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u0173\0\65\0\u04f8\0\u01a8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u013e"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u013e\0\u0b63\0\u0b98\0\u013e\0\u0bcd"+
    "\0\u0c02\0\u013e\0\u013e\0\u013e\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u013e\0\u013e\0\u013e\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u013e\0\u0eb3\0\u0ee8\0\u0f1d\0\u013e"+
    "\0\u013e\0\u0f52\0\65\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u013e\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u013e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\2\10\1\15\1\10\1\16"+
    "\1\10\1\17\1\20\2\10\1\21\1\22\1\10\1\23"+
    "\1\24\3\10\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\3\10\1\2\1\35\6\10\1\36\2\10"+
    "\66\0\2\3\65\0\1\37\65\0\1\10\1\6\2\10"+
    "\3\0\24\10\10\0\3\10\1\0\12\10\4\0\1\10"+
    "\1\6\1\40\1\10\3\0\24\10\10\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\24\10\10\0\3\10\1\0"+
    "\12\10\10\41\1\42\1\43\53\41\11\44\1\45\1\42"+
    "\52\44\4\0\4\10\3\0\1\10\1\46\22\10\10\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\11\10\1\47"+
    "\12\10\10\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\5\10\1\50\16\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\2\10\1\51\21\10\10\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\11\10\1\52\11\10\1\53"+
    "\10\0\3\10\1\0\12\10\4\0\4\10\3\0\10\10"+
    "\1\54\13\10\10\0\3\10\1\0\12\10\4\0\4\10"+
    "\3\0\12\10\1\55\2\10\1\56\6\10\10\0\3\10"+
    "\1\0\12\10\4\0\4\10\3\0\10\10\1\57\13\10"+
    "\10\0\3\10\1\0\12\10\4\0\4\10\3\0\12\10"+
    "\1\60\11\10\10\0\3\10\1\0\12\10\4\0\4\10"+
    "\3\0\10\10\1\61\13\10\10\0\3\10\1\0\12\10"+
    "\46\0\1\62\22\0\4\10\3\0\24\10\10\0\3\10"+
    "\1\0\1\10\1\63\10\10\4\0\4\10\3\0\24\10"+
    "\10\0\3\10\1\0\11\10\1\64\2\37\1\0\62\37"+
    "\4\0\1\10\1\40\2\10\3\0\24\10\10\0\3\10"+
    "\1\0\12\10\2\41\1\0\62\41\2\44\1\0\62\44"+
    "\4\0\4\10\3\0\2\10\1\65\21\10\10\0\3\10"+
    "\1\0\12\10\4\0\4\10\3\0\21\10\1\66\2\10"+
    "\10\0\3\10\1\0\12\10\4\0\4\10\3\0\6\10"+
    "\1\67\15\10\10\0\3\10\1\0\12\10\4\0\4\10"+
    "\3\0\2\10\1\70\21\10\10\0\3\10\1\0\12\10"+
    "\4\0\4\10\3\0\12\10\1\71\11\10\10\0\3\10"+
    "\1\0\12\10\4\0\4\10\3\0\2\10\1\72\21\10"+
    "\10\0\3\10\1\0\12\10\4\0\4\10\3\0\1\73"+
    "\23\10\10\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\11\10\1\74\12\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\17\10\1\75\4\10\10\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\14\10\1\76\7\10\10\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\2\10\1\77"+
    "\21\10\10\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\21\10\1\100\2\10\10\0\3\10\1\0\12\10\47\0"+
    "\1\101\21\0\4\10\3\0\24\10\10\0\3\10\1\0"+
    "\1\10\1\102\10\10\4\0\4\10\3\0\24\10\10\0"+
    "\3\10\1\0\10\10\1\103\1\10\4\0\4\10\3\0"+
    "\3\10\1\104\20\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\12\10\1\105\11\10\10\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\7\10\1\106\14\10\10\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\13\10\1\107"+
    "\10\10\10\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\10\10\1\110\13\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\5\10\1\111\16\10\10\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\4\10\1\112\17\10\10\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\13\10\1\113"+
    "\10\10\10\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\16\10\1\114\5\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\21\10\1\115\2\10\10\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\10\10\1\116\13\10\10\0"+
    "\3\10\1\0\12\10\50\0\1\117\20\0\4\10\3\0"+
    "\24\10\10\0\1\10\1\120\1\10\1\0\12\10\4\0"+
    "\4\10\3\0\24\10\10\0\2\10\1\121\1\0\12\10"+
    "\4\0\4\10\3\0\2\10\1\122\21\10\10\0\3\10"+
    "\1\0\12\10\4\0\4\10\3\0\7\10\1\123\14\10"+
    "\10\0\3\10\1\0\12\10\4\0\4\10\3\0\11\10"+
    "\1\124\12\10\10\0\3\10\1\0\12\10\4\0\4\10"+
    "\3\0\1\10\1\125\22\10\10\0\3\10\1\0\12\10"+
    "\4\0\4\10\3\0\12\10\1\126\11\10\10\0\3\10"+
    "\1\0\12\10\4\0\4\10\3\0\11\10\1\127\12\10"+
    "\10\0\3\10\1\0\12\10\51\0\1\130\17\0\4\10"+
    "\3\0\24\10\10\0\3\10\1\0\2\10\1\131\7\10"+
    "\4\0\4\10\3\0\20\10\1\132\3\10\10\0\3\10"+
    "\1\0\12\10\4\0\4\10\3\0\11\10\1\133\12\10"+
    "\10\0\3\10\1\0\12\10\4\0\4\10\3\0\2\10"+
    "\1\134\21\10\10\0\3\10\1\0\12\10\4\0\4\10"+
    "\3\0\20\10\1\135\3\10\10\0\3\10\1\0\12\10"+
    "\52\0\1\136\16\0\4\10\3\0\24\10\10\0\3\10"+
    "\1\0\1\137\11\10\4\0\4\10\3\0\7\10\1\140"+
    "\14\10\10\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\10\10\1\141\13\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\10\10\1\142\13\10\10\0\3\10\1\0"+
    "\12\10\52\0\1\143\16\0\4\10\3\0\24\10\10\0"+
    "\3\10\1\0\2\10\1\144\7\10\4\0\4\10\3\0"+
    "\11\10\1\145\12\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\24\10\10\0\3\10\1\0\3\10\1\146"+
    "\6\10\4\0\4\10\3\0\4\10\1\147\17\10\10\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\24\10\10\0"+
    "\1\10\1\150\1\10\1\0\12\10\4\0\4\10\3\0"+
    "\22\10\1\151\1\10\10\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\24\10\10\0\3\10\1\0\1\10\1\152"+
    "\10\10\4\0\4\10\3\0\24\10\10\0\3\10\1\0"+
    "\4\10\1\153\5\10\4\0\4\10\3\0\24\10\10\0"+
    "\3\10\1\0\5\10\1\154\4\10\4\0\4\10\3\0"+
    "\24\10\10\0\3\10\1\0\6\10\1\155\3\10\4\0"+
    "\4\10\3\0\24\10\10\0\1\156\2\10\1\0\12\10"+
    "\4\0\4\10\3\0\24\10\10\0\3\10\1\0\7\10"+
    "\1\157\2\10\4\0\4\10\3\0\24\10\10\0\3\10"+
    "\1\0\10\10\1\160\1\10\4\0\4\10\3\0\24\10"+
    "\10\0\3\10\1\0\11\10\1\161";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4611];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\7\11\5\1\1\0\1\11\3\0"+
    "\14\1\1\0\16\1\1\0\15\1\1\0\10\1\1\0"+
    "\5\1\1\0\4\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _MetaModelLexer() {
    this((java.io.Reader)null);
  }


  public _MetaModelLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MetaModelLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return COMMA;
          }
        case 32: break;
        case 22: 
          { return MREF;
          }
        case 33: break;
        case 14: 
          { return COMMENT;
          }
        case 34: break;
        case 20: 
          { return FUNC;
          }
        case 35: break;
        case 26: 
          { return OUTPUT;
          }
        case 36: break;
        case 16: 
          { return ATT;
          }
        case 37: break;
        case 31: 
          { return ANNOTATIONS_DECLR;
          }
        case 38: break;
        case 29: 
          { return EOF;
          }
        case 39: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 40: break;
        case 3: 
          { return SUB;
          }
        case 41: break;
        case 11: 
          { return BODY_CLOSE;
          }
        case 42: break;
        case 13: 
          { return ANNOT_PARAM_CLOSE;
          }
        case 43: break;
        case 28: 
          { return NEWLINE;
          }
        case 44: break;
        case 7: 
          { return COLON;
          }
        case 45: break;
        case 27: 
          { return EXTENDS;
          }
        case 46: break;
        case 24: 
          { return INPUT;
          }
        case 47: break;
        case 10: 
          { return BODY_OPEN;
          }
        case 48: break;
        case 30: 
          { return DEPENDENCY;
          }
        case 49: break;
        case 17: 
          { return REF;
          }
        case 50: break;
        case 21: 
          { return FROM;
          }
        case 51: break;
        case 9: 
          { return EQ;
          }
        case 52: break;
        case 15: 
          { return STRING;
          }
        case 53: break;
        case 23: 
          { return CRLF;
          }
        case 54: break;
        case 19: 
          { return ENUM;
          }
        case 55: break;
        case 25: 
          { return CLASS;
          }
        case 56: break;
        case 12: 
          { return ANNOT_PARAM_OPEN;
          }
        case 57: break;
        case 4: 
          { return IDENT;
          }
        case 58: break;
        case 5: 
          { return NUMBER;
          }
        case 59: break;
        case 6: 
          { return MULT_SEP;
          }
        case 60: break;
        case 18: 
          { return WITH;
          }
        case 61: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 62: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
