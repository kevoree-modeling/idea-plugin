
{
  parserClass="org.kevoree.modeling.idea.parser.MetaModelParser"
  parserUtilClass="org.kevoree.modeling.idea.parser.MetaModelParserUtil"
  stubParserClass="org.kevoree.modeling.idea.parser.GeneratedParserUtilBase"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="MetaModel"
  psiImplClassSuffix="Impl"
  psiPackage="org.kevoree.modeling.idea.psi"
  psiImplPackage="org.kevoree.modeling.idea.psi.impl"

  elementTypeHolderClass="org.kevoree.modeling.idea.psi.MetaModelTypes"
  elementTypeClass="org.kevoree.modeling.idea.psi.MetaModelElementType"
  tokenTypeClass="org.kevoree.modeling.idea.psi.MetaModelTokenType"

  psiImplUtilClass="org.kevoree.modeling.idea.psi.MetaModelUtil"

tokens=[
    WITH='with'
    CLASS='class'
    ENUM='enum'
    FUNC='func'
    ATT='att'
    REF='rel'
    FROM='from'
    DEPENDENCY='dependency'
    ARRAY='[]'
    INPUT='input'
    OUTPUT='output'
    EXTENDS='extends'
    COLON=':'
    COMMA=','
    SUB='/'
    EQ='='
    BODY_OPEN='{'
    BODY_CLOSE='}'
    ANNOT_PARAM_OPEN='('
    ANNOT_PARAM_CLOSE=')'
    MULT_SEP='.'
    eof = '<<EOF>>'
    comment='regexp://.*'
    NUMBER='regexp:[\-]?[0-9]+[.]?[0-9]*'
    IDENT='regexp:[\*\.a-zA-Z0-9_\-]+'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}

METAMODEL ::= ANNOTATION_DECLR* DECLARATION*

DECLARATION ::= (CLASS_DECLARATION | ENUM_DECLARATION | eof | newline | CRLF)
CLASS_DECLARATION ::= CLASS TYPE_DECLARATION PARENTS_DECLARATION? BODY_OPEN ANNOTATION_DECLR* CLASS_ELEM_DECLARATION* BODY_CLOSE {pin=1 recoverWhile=rule_start}
ENUM_DECLARATION ::= ENUM TYPE_DECLARATION BODY_OPEN ENUM_ELEM_DECLARATION (COMMA ENUM_ELEM_DECLARATION)* BODY_CLOSE {pin=1 recoverWhile=rule_start}
ENUM_ELEM_DECLARATION ::= IDENT
PARENTS_DECLARATION ::= EXTENDS TYPE_DECLARATION (COMMA TYPE_DECLARATION)*
TYPE_DECLARATION ::= IDENT {mixin="org.kevoree.modeling.idea.psi.impl.MetaModelNamedElementImpl" implements="org.kevoree.modeling.idea.psi.MetaModelNamedElement" methods=[setName getNameIdentifier]}
CLASS_ELEM_DECLARATION ::= ATTRIBUTE_DECLARATION | RELATION_DECLARATION | OPERATION_DECLARATION | DEPENDENCY_DECLARATION | INPUT_DECLARATION | OUTPUT_DECLARATION

ATTRIBUTE_DECLARATION ::= ATT ATTRIBUTE_NAME COLON TYPE_DECLARATION ANNOTATION_DECLR*
ATTRIBUTE_NAME ::= IDENT

DEPENDENCY_DECLARATION ::= DEPENDENCY DEPENDENCY_NAME COLON TYPE_DECLARATION
DEPENDENCY_NAME ::= IDENT

INPUT_DECLARATION ::= INPUT INPUT_NAME string
INPUT_NAME ::= IDENT
OUTPUT_DECLARATION ::= OUTPUT OUTPUT_NAME COLON TYPE_DECLARATION
OUTPUT_NAME ::= IDENT

RELATION_DECLARATION ::= REF RELATION_NAME COLON TYPE_DECLARATION ANNOTATION_DECLR*
RELATION_NAME ::= IDENT

OPERATION_DECLARATION ::= FUNC OPERATION_NAME (ANNOT_PARAM_OPEN OPERATION_PARAMS ANNOT_PARAM_CLOSE)? (OPERATION_RETURN)?
OPERATION_PARAMS ::= OPERATION_PARAM (COMMA OPERATION_PARAM)*
OPERATION_PARAM ::= IDENT COLON TYPE_DECLARATION ARRAY?
OPERATION_RETURN ::= COLON TYPE_DECLARATION ARRAY?
OPERATION_NAME ::= IDENT

ANNOTATION_DECLR ::= WITH ANNOTATION_NAME (NUMBER|string)?
ANNOTATION_NAME ::= IDENT

private rule_start ::= !(CLASS|ENUM)
